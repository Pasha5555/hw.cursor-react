{"version":3,"sources":["Components/img/oficial.png","Components/post.js","Components/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","author","name","photo","nickname","content","image","date","className","src","ikon","class","Data","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,qC,sMC0C5BC,MAvCf,SAAcC,GAAO,IAAD,EACgDA,EAAzDC,OAASC,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,SAAWC,EAAwBL,EAAxBK,QAASC,EAAeN,EAAfM,MAAOC,EAAQP,EAARO,KAMxD,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,MAAMC,IAAMN,KAE/B,yBAAKK,UAAU,gBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,OAAOC,IAAKC,OAE/B,4BAAKR,GACL,4BAAKE,EAAL,IAAgBG,IAEpB,yBAAKC,UAAU,WACb,2BAAIH,KAGV,yBAAKG,UAAU,kBACV,yBAAMA,UAAU,QAAQC,IAAKH,KAElC,yBAAKE,UAAU,UACT,uBAAGG,MAAM,iBAAgB,8BA3B5B,MA4BG,uBAAGA,MAAM,iBAAT,KAA2B,8BA3B9B,KA4BG,uBAAGA,MAAM,gBAAT,IAAyB,8BA3B/B,OA4BM,uBAAGA,MAAM,iBAAgB,8BA3B7B,SCaHC,MAdf,WAEE,OACE,kBAAC,EAAD,CAAMX,OAAQ,CACZC,KAAM,mBACNC,MARe,6FASfC,SAAU,eAEZC,QAAQ,kDACRC,MAXc,gGAYdC,KAAM,wCCLKM,MARf,WACE,OACE,yBAAKL,UAAU,OACZ,kBAAC,EAAD,QCKaM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b26101d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oficial.ee8c7cca.png\";","import React from 'react';\r\nimport ikon from './img/oficial.png'\r\n\r\nfunction Post(props){\r\n    const {author: {name, photo, nickname}, content, image, date} = props;\r\n    let comments = 400;\r\n    let retweets = 85;\r\n    let likes = 1200;\r\n    let uploads = 30;\r\n    \r\n    return(\r\n        <div className=\"Container\">\r\n            <div className=\"Ava_position\">\r\n                <img className='ava' src= {photo} />\r\n            </div>\r\n            <div className=\"main_content\">\r\n                <div className='header_block' >\r\n                    <div className=\"header_data\" >\r\n                        <div className=\"ikon_position\">\r\n                            <img className=\"ikon\" src={ikon}/>\r\n                        </div>\r\n                        <h2>{name}</h2>\r\n                        <h3>{nickname} {date}</h3>\r\n                    </div>\r\n                    <div className=\"message\" >\r\n                      <p>{content}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"photo_position\">\r\n                     <img  className=\"photo\" src={image}/>\r\n                </div>\r\n                <div className=\"footer\">\r\n                      <i class=\"fa fa-comment\"><span>{comments}</span></i>\r\n                      <i class=\"fa fa-retweet\">  <span>{retweets}</span></i>\r\n                      <i class=\"fas fa-heart\"> <span>{likes}</span></i>\r\n                      <i class=\"fas fa-upload\"><span>{uploads}</span></i>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","import React from 'react';\r\nimport './post.css';\r\nimport Post from './post';\r\n\r\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\r\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\r\n\r\nfunction Data() {\r\n\r\n  return (\r\n    <Post author={{\r\n      name: \"Anakin Skywalker\",\r\n      photo: ANAKIN_IMAGE,\r\n      nickname: \"@dart_vader\"\r\n    }}\r\n    content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\r\n    image={RAY_IMAGE}\r\n    date={\" · 26 февр.\"}\r\n  />\r\n  );\r\n}\r\nexport default Data;\r\n//gfbn\r\n","import React from 'react';\nimport './App.css';\nimport Data from './Components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Data/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}